#!/bin/bash

set -ex

_action=$1
shift

export CLUSTER_NAME=${CLUSTER_NAME:-my-cluster}
export BASE_DOMAIN=${BASE_DOMAIN:-example.com}
export WORKER_MEMORY=${WORKER_MEMORY:-32768}
export WORKER_VCPU=${WORKER_VCPU:-16}
export IP_STACK=${IP_STACK:-v4}
export NUM_WORKERS=${NUM_WORKERS:-3}

export KUBECONFIG=dev-scripts/ocp/${CLUSTER_NAME}/auth/kubeconfig

export NFS_PATH=/home/nfshare
export NFS_PROVISIONER_NAME=nfs-storage
export NFS_SERVER=192.168.122.1

export CONFIG="config_${USER}.sh"

function devcluster::usage() {
	echo "Usage:
	
	./dev-cluster <cammand>
			
		create-cluster     ==> Create new OCP cluster
		install-nfs-class  ==> Install NFS Storage Class on the cluster
		install-metallb    ==> Install MetalLB (LoadBalancer) on the cluster
		install-cnv        ==> Install CNV (Openshift Virtualization) on the cluster

		all                ==> Create New OCP cluster and install NFS StorageClass, MetalLB and CNV on it
		clean              ==> Delete the OCP cluster
		help               ==> Print usage
	"
}

function devcluster::clean() {
	if [ -d "dev-scripts" ] 
	then
		cd dev-scripts
		make clean
		cd ..
		rm -rf dev-scripts
	fi
	
}

function devcluster::create-cluster() {
	if [[ "${PULL_SECRET_PATH}" == "" ]]; then
        	echo "!!!Must set the Environment variables \"PULL_SECRET_PATH\"!!!"
		echo " Download it from https://console.redhat.com/openshift/install/pull-secret"
		echo "Run 'export PULL_SECRET_PATH=...'"
        	exit 1
	fi
	if [[ "${CI_TOKEN}" == "" ]]; then
        	echo "!!!Must set the Environment variables \"CI_TOKEN\"!!!"
		echo "Go to https://console-openshift-console.apps.ci.l2s4.p1.openshiftapps.com/, click on your name in the top right, copy the login command, extract the token from the command and use it to set CI_TOKEN variable"
		echo "Run 'export CI_TOKEN=...'"
        	exit 1
	fi
	git clone https://github.com/openshift-metal3/dev-scripts
	cd dev-scripts
	cp ${PULL_SECRET_PATH} pull_secret.json
	sed 's/export CI_TOKEN=''/export CI_TOKEN='${CI_TOKEN}'/g' config_exaple.sh > config_${USER}.sh
	make
	cd ..

}

function devcluster::install-nfs-class() {
	echo "Configure NFS server in the hosting server..."
	dnf install nfs-utils -y
	mkdir -p ${NFS_PATH}
	chown -R nobody:nobody ${NFS_PATH}
	chmod -R 777 ${NFS_PATH}
	echo "${NFS_PATH}  192.168.111.0/24(rw,sync,no_root_squash,no_subtree_check,no_wdelay)" > /etc/exports
	exportfs -rv

	echo "Set firewall rules..."
	firewall-cmd --zone=libvirt --add-service mountd --permanent
	firewall-cmd --zone=libvirt --add-service rpc-bind --permanent
	firewall-cmd --zone=libvirt --add-service nfs --permanent
	firewall-cmd --reload

	echo "Enable and start the NFS related services..."
	systemctl enable nfs-server rpcbind
	systemctl start nfs-server rpcbind nfs-mountd

	echo "Deploy NFS provisioner in the cluster..."
	echo "(1. Create \"nfs\" namespace)"
	cat  manifests/nfs/namespace.yaml | kubectl apply -f -
	echo "(2. Apply Deployment)"
	cat  manifests/nfs/deployments.yaml | envsubst | kubectl apply -f -
	echo "(3. Apply RBAC)"
	cat  manifests/nfs/rbac.yaml | kubectl apply -f -
	echo "(4. Apply StorageClass)"
	cat  manifests/nfs/storageclass.yaml | envsubst | kubectl apply -f -

	echo "Assign appropriate scc..."
	oc create role use-scc-hostmount-anyuid --verb=use --resource=scc --resource-name=hostmount-anyuid -n nfs
	oc adm policy add-role-to-user use-scc-hostmount-anyuid -z nfs-client-provisioner --role-namespace nfs -n nfs
	oc scale deploy nfs-client-provisioner -n nfs --replicas 0
	oc scale deploy nfs-client-provisioner -n nfs --replicas 1

}

function devcluster::install-metallb() {
	echo "Create \"metallb-system\" namespace..."
	cat  manifests/metallb/namespace.yaml | kubectl apply -f -

	echo "Create MetalLB Objects..."
	cat  manifests/metallb/objects.yaml | kubectl apply -f -

	echo "Create the MetalLB secret memberlist..."
	kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

	echo "Define and deploy Layer2 configuration..."
	cat  manifests/metallb/config.yaml | kubectl apply -f -

	echo "Assign appropriate scc..."
	oc adm policy add-scc-to-user privileged -n metallb-system -z speaker
	oc adm policy add-scc-to-user privileged -n metallb-system -z controller
}

function devcluster::install-cnv() {
	echo "Subscribing to the OpenShift Virtualization catalog..."
	cat  manifests/cnv/cnv.yaml | kubectl apply -f -

	echo "Sleep 60 seconds..."
	sleep 60

	echo "Deploying the OpenShift Virtualization Operator..."
	cat  manifests/cnv/hco.yaml | kubectl apply -f -
}

case ${_action} in
"clean")
        devcluster::clean
        ;;
"create-cluster")
        devcluster::create-cluster
        ;;
"install-nfs-class")
        devcluster::install-nfs-class
        ;;
"install-metallb")
        devcluster::install-metallb
        ;;
"install-cnv")
        devcluster::install-cnv
        ;;
"all")
        devcluster::clean
        devcluster::create-cluster
        devcluster::install-nfs-class
        devcluster::install-metallb
        devcluster::install-cnv
        ;;
"help")
        devcluster::usage
        ;;
*)
	echo "Error:
	Unsupported command!!!
	"
        devcluster::usage
	exit 1
        ;;
esac
